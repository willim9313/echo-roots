[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "echo-roots"
version = "1.0.0"
description = "Practical framework for taxonomy construction, attribute normalization, and semantic enrichment"
readme = "README.md"
license = {file = "LICENSE.md"}
requires-python = ">=3.13"
authors = [
    {name = "Echo-Roots Contributors"},
]
keywords = ["taxonomy", "nlp", "knowledge-graph", "e-commerce", "normalization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core data processing
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "pydantic-extra-types>=2.1.0",
    
    # Storage backends (DuckDB is core, others optional)
    "duckdb>=0.9.0",
    "polars>=0.20.0",  # DataFrame operations compatible with DuckDB
    "pyarrow>=14.0.0",  # Parquet support
    
    # Optional graph and vector storage
    "neo4j>=5.0.0; extra == 'graph'",
    "qdrant-client>=1.7.0; extra == 'vector'",
    
    # Domain and configuration
    "pyyaml>=6.0",
    "jsonschema>=4.20.0",
    
    # CLI and utilities
    "typer>=0.9.0",
    "rich>=13.0.0",
    "click>=8.1.0",
    
    # LLM and embeddings (optional)
    "openai>=1.0.0; extra == 'llm'",
    "sentence-transformers>=2.2.0; extra == 'embeddings'",
    "tiktoken>=0.5.0; extra == 'llm'",
    
    # Documentation and templating
    "markdown>=3.5.0",
    "jinja2>=3.1.0",
    
    # Utilities
    "httpx>=0.25.0",
    "python-dateutil>=2.8.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "psutil>=5.9.0",
]

[project.optional-dependencies]
# Storage backends
graph = ["neo4j>=5.0.0"]
vector = ["qdrant-client>=1.7.0"]
search = ["opensearch-py>=2.0.0"]

# AI/ML features
llm = ["openai>=1.0.0", "tiktoken>=0.5.0"]
embeddings = ["sentence-transformers>=2.2.0", "torch>=2.0.0"]
eval = ["deepeval>=0.20.0"]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    "pytest-repeat>=0.9.0",
    "pytest-rerunfailures>=12.0",
    "pytest-xdist>=3.8.0",
    "ruff>=0.1.0",
    "mypy>=1.7.0",
    "black>=23.0.0",
    "pre-commit>=3.5.0",
    "types-pyyaml>=6.0.0",
    "types-python-dateutil>=2.8.0",
]

# Complete feature sets
full = [
    "echo-roots[graph,vector,search,llm,embeddings,eval]"
]

all = [
    "echo-roots[full,dev]"
]

[project.urls]
Homepage = "https://github.com/willim9313/echo-roots"
Repository = "https://github.com/willim9313/echo-roots"
Documentation = "https://github.com/willim9313/echo-roots/tree/main/docs"
Issues = "https://github.com/willim9313/echo-roots/issues"

[project.scripts]
echo-roots = "echo_roots.cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["src/echo_roots"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "/domains",
    "/README.md",
    "/LICENSE.md",
]

# Ruff configuration
[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstyle
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["D", "N"]  # Relax docstring and naming for tests
"scripts/**/*.py" = ["D"]     # Relax docstring requirements for scripts

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
known-first-party = ["echo_roots"]

# MyPy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "duckdb.*",
    "neo4j.*", 
    "qdrant_client.*",
    "sentence_transformers.*",
    "tiktoken.*",
    "deepeval.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-v --cov=echo_roots --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "llm: marks tests that require LLM API access",
    "storage: marks tests that require external storage (Neo4j, Qdrant)",
]

[tool.coverage.run]
source = ["src/echo_roots"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
